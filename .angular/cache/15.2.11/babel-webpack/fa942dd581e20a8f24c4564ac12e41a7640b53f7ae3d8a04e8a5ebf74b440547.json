{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  title = 'rock-paper-scissors';\n  isOptionSelected = false;\n  optionSelectedByFirstPlayer = '';\n  optionSelectedBySecondPlayer = '';\n  matchFinished = false;\n  isFirstPlayerTheWinner = false;\n  hasToShowModal = false;\n  matchScore = 0;\n\n  constructor() {}\n\n  selectedOption(option) {\n    console.log(option);\n    this.isOptionSelected = true;\n    this.optionSelectedByFirstPlayer = option;\n    let aleatorio = Math.floor(Math.random() * 3);\n    let icon = 'paper-icon';\n\n    switch (aleatorio) {\n      case 0:\n        icon = 'paper-icon';\n        break;\n\n      case 1:\n        icon = 'scissors-icon';\n        break;\n\n      case 2:\n        icon = 'rock-icon';\n        break;\n    }\n\n    this.optionSelectedBySecondPlayer = icon;\n\n    if (this.optionSelectedByFirstPlayer === 'scissors-icon' && this.optionSelectedBySecondPlayer === 'paper-icon' || this.optionSelectedByFirstPlayer === 'paper-icon' && this.optionSelectedBySecondPlayer === 'rock-icon' || this.optionSelectedByFirstPlayer === 'rock-icon' && this.optionSelectedBySecondPlayer === 'scissors-icon') {\n      this.isFirstPlayerTheWinner = true;\n    }\n\n    this.checkIfFirstPlayerWin();\n  }\n\n  checkIfFirstPlayerWin() {\n    const winMap = {\n      'scissors-icon': 'paper-icon',\n      'paper-icon': 'rock-icon',\n      'rock-icon': 'scissors-icon'\n    };\n    this.isFirstPlayerTheWinner = winMap[this.optionSelectedByFirstPlayer] === this.optionSelectedBySecondPlayer;\n    this.modifyPlayerScore();\n  }\n\n  modifyPlayerScore() {\n    if (this.isFirstPlayerTheWinner) this.matchScore++;\n  }\n\n  restartGame() {\n    this.isOptionSelected = false;\n    this.optionSelectedByFirstPlayer = '';\n    this.optionSelectedBySecondPlayer = '';\n    this.matchFinished = false;\n    this.isFirstPlayerTheWinner = false;\n  }\n\n  changeModalFalse() {\n    this.hasToShowModal = false;\n  }\n\n  showModal() {\n    this.hasToShowModal = true;\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"sources":["C:\\Propio\\rock-paper-scissors\\src\\app\\app.component.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,eAA1B;AAQO,IAAM,YAAY,GAAlB,MAAM,YAAN,CAAkB;AACvB,EAAA,KAAK,GAAG,qBAAH;AACL,EAAA,gBAAgB,GAAG,KAAH;AAChB,EAAA,2BAA2B,GAAG,EAAH;AAC3B,EAAA,4BAA4B,GAAG,EAAH;AAC5B,EAAA,aAAa,GAAG,KAAH;AACb,EAAA,sBAAsB,GAAG,KAAH;AACtB,EAAA,cAAc,GAAG,KAAH;AACd,EAAA,UAAU,GAAG,CAAH;;AACV,EAAA,WAAA,GAAA,CAAgB;;AACT,EAAA,cAAc,CAAC,MAAD,EAAc;AACjC,IAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,SAAK,gBAAL,GAAwB,IAAxB;AACA,SAAK,2BAAL,GAAmC,MAAnC;AACA,QAAI,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,CAA3B,CAAhB;AACA,QAAI,IAAI,GAAG,YAAX;;AACA,YAAQ,SAAR;AACE,WAAK,CAAL;AACE,QAAA,IAAI,GAAG,YAAP;AACA;;AACF,WAAK,CAAL;AACE,QAAA,IAAI,GAAG,eAAP;AAEA;;AACF,WAAK,CAAL;AACE,QAAA,IAAI,GAAG,WAAP;AACA;AAVJ;;AAYA,SAAK,4BAAL,GAAkC,IAAlC;;AACA,QAAI,KAAK,2BAAL,KAAqC,eAArC,IAAyD,KAAK,4BAAL,KAAsC,YAA/F,IAA+G,KAAK,2BAAL,KAAqC,YAArC,IAAsD,KAAK,4BAAL,KAAsC,WAA3M,IAA0N,KAAK,2BAAL,KAAqC,WAArC,IAAqD,KAAK,4BAAL,KAAsC,eAAzT,EAA0U;AACxU,WAAK,sBAAL,GAA8B,IAA9B;AACD;;AACD,SAAK,qBAAL;AACD;;AACM,EAAA,qBAAqB,GAAA;AAC1B,UAAM,MAAM,GAAgC;AAC1C,uBAAiB,YADyB;AAE1C,oBAAc,WAF4B;AAG1C,mBAAa;AAH6B,KAA5C;AAKA,SAAK,sBAAL,GAA8B,MAAM,CAAC,KAAK,2BAAN,CAAN,KAA6C,KAAK,4BAAhF;AACA,SAAK,iBAAL;AACD;;AACO,EAAA,iBAAiB,GAAA;AACvB,QAAG,KAAK,sBAAR,EAAiC,KAAK,UAAL;AAClC;;AACM,EAAA,WAAW,GAAA;AAClB,SAAK,gBAAL,GAAwB,KAAxB;AACA,SAAK,2BAAL,GAAmC,EAAnC;AACA,SAAK,4BAAL,GAAoC,EAApC;AACA,SAAK,aAAL,GAAqB,KAArB;AACA,SAAK,sBAAL,GAA8B,KAA9B;AACC;;AACM,EAAA,gBAAgB,GAAA;AACrB,SAAK,cAAL,GAAsB,KAAtB;AACD;;AACM,EAAA,SAAS,GAAA;AACd,SAAK,cAAL,GAAsB,IAAtB;AACD;;AA1DsB,CAAlB;AAAM,YAAY,GAAA,UAAA,CAAA,CALxB,SAAS,CAAC;AACT,EAAA,QAAQ,EAAE,UADD;AAET,EAAA,WAAW,EAAE,sBAFJ;AAGT,EAAA,SAAS,EAAE,CAAC,sBAAD;AAHF,CAAD,CAKe,CAAA,EAAZ,YAAY,CAAZ;SAAA,Y","sourcesContent":["import { Component } from '@angular/core';\ntype GameOption = 'scissors-icon' | 'paper-icon' | 'rock-icon';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'rock-paper-scissors';\n  isOptionSelected = false;\n  optionSelectedByFirstPlayer = '';\n  optionSelectedBySecondPlayer = '';\n  matchFinished = false;\n  isFirstPlayerTheWinner = false;\n  hasToShowModal = false;\n  matchScore = 0;\n  constructor() {}\n  public selectedOption(option:string){\n    console.log(option);\n    this.isOptionSelected = true;\n    this.optionSelectedByFirstPlayer = option;\n    let aleatorio = Math.floor(Math.random() * 3);\n    let icon = 'paper-icon';\n    switch (aleatorio) {\n      case 0:\n        icon = 'paper-icon';\n        break;\n      case 1:\n        icon = 'scissors-icon';\n\n        break;\n      case 2:\n        icon = 'rock-icon';\n        break;\n    }\n    this.optionSelectedBySecondPlayer=icon;\n    if (this.optionSelectedByFirstPlayer === 'scissors-icon' &&  this.optionSelectedBySecondPlayer === 'paper-icon' || this.optionSelectedByFirstPlayer === 'paper-icon' &&  this.optionSelectedBySecondPlayer === 'rock-icon' || this.optionSelectedByFirstPlayer === 'rock-icon' &&  this.optionSelectedBySecondPlayer === 'scissors-icon') {\n      this.isFirstPlayerTheWinner = true;\n    }\n    this.checkIfFirstPlayerWin();\n  }\n  public checkIfFirstPlayerWin(){\n    const winMap: { [key in string]: string } = {\n      'scissors-icon': 'paper-icon',\n      'paper-icon': 'rock-icon',\n      'rock-icon': 'scissors-icon'\n    };\n    this.isFirstPlayerTheWinner = winMap[this.optionSelectedByFirstPlayer] === this.optionSelectedBySecondPlayer;\n    this.modifyPlayerScore();\n  }\n  private modifyPlayerScore(){\n    if(this.isFirstPlayerTheWinner)  this.matchScore++;\n  }\n  public restartGame(){\n  this.isOptionSelected = false;\n  this.optionSelectedByFirstPlayer = '';\n  this.optionSelectedBySecondPlayer = '';\n  this.matchFinished = false;\n  this.isFirstPlayerTheWinner = false;\n  }\n  public changeModalFalse(){\n    this.hasToShowModal = false;\n  }\n  public showModal(){\n    this.hasToShowModal = true;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}