{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function buffer(closingNotifier) {\n  return operate((source, subscriber) => {\n    let currentBuffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, value => currentBuffer.push(value), () => {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber, () => {\n      const b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return () => {\n      currentBuffer = null;\n    };\n  });\n}","map":{"version":3,"sources":["C:/Propio/rock-paper-scissors/node_modules/rxjs/dist/esm/internal/operators/buffer.js"],"names":["operate","noop","createOperatorSubscriber","innerFrom","buffer","closingNotifier","source","subscriber","currentBuffer","subscribe","value","push","next","complete","b"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,SAASC,MAAT,CAAgBC,eAAhB,EAAiC;AACpC,SAAOL,OAAO,CAAC,CAACM,MAAD,EAASC,UAAT,KAAwB;AACnC,QAAIC,aAAa,GAAG,EAApB;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiBP,wBAAwB,CAACK,UAAD,EAAcG,KAAD,IAAWF,aAAa,CAACG,IAAd,CAAmBD,KAAnB,CAAxB,EAAmD,MAAM;AAC9FH,MAAAA,UAAU,CAACK,IAAX,CAAgBJ,aAAhB;AACAD,MAAAA,UAAU,CAACM,QAAX;AACH,KAHwC,CAAzC;AAIAV,IAAAA,SAAS,CAACE,eAAD,CAAT,CAA2BI,SAA3B,CAAqCP,wBAAwB,CAACK,UAAD,EAAa,MAAM;AAC5E,YAAMO,CAAC,GAAGN,aAAV;AACAA,MAAAA,aAAa,GAAG,EAAhB;AACAD,MAAAA,UAAU,CAACK,IAAX,CAAgBE,CAAhB;AACH,KAJ4D,EAI1Db,IAJ0D,CAA7D;AAKA,WAAO,MAAM;AACTO,MAAAA,aAAa,GAAG,IAAhB;AACH,KAFD;AAGH,GAda,CAAd;AAeH","sourcesContent":["import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function buffer(closingNotifier) {\n    return operate((source, subscriber) => {\n        let currentBuffer = [];\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => currentBuffer.push(value), () => {\n            subscriber.next(currentBuffer);\n            subscriber.complete();\n        }));\n        innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber, () => {\n            const b = currentBuffer;\n            currentBuffer = [];\n            subscriber.next(b);\n        }, noop));\n        return () => {\n            currentBuffer = null;\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}